{"metadata":{"modules":[{"name":"Kubrick"}],"color":{"standardColorIdentifier":"purple"},"roleHeading":"Article","role":"article","title":"Getting Started"},"kind":"article","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Kubrick\/documentation\/Kubrick"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/kubrick\/gettingstarted"]}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Kubrick is a complex framework but generally easy to use. We will walk through the basics of building and submitting"},{"type":"text","text":" "},{"text":"Jobs to a Director.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#Submitting-our-first-Job"}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#Job-with-an-input","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#Job-with-a-dependency","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#Dependency-injection","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#Dynamically-executing-Jobs","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#A-lesson-in-Job-uniqueness"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#Job-modifiers","type":"reference","isActive":true}],"type":"paragraph"}]}]},{"level":3,"type":"heading","text":"What is a “Job”?","anchor":"What-is-a-Job"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Jobs are types that implement one of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job"},{"text":" protocols, ","type":"text"},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/ResultJob","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/ExecutableJob","isActive":true,"type":"reference"},{"type":"text","text":" depending on whether"},{"text":" ","type":"text"},{"type":"text","text":"your Job returns a result or not. Implementation is as simple as providing an "},{"type":"codeVoice","code":"execute"},{"type":"text","text":" method."}]},{"inlineContent":[{"type":"text","text":"Jobs that can be submitted to a "},{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobDirector","isActive":true},{"type":"text","text":" are special, and must implement "},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/SubmittableJob","isActive":true,"type":"reference"},{"type":"text","text":". Submittable Jobs"},{"type":"text","text":" "},{"text":"must be ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" and cannot return a result nor can they throw errors.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Submitting our first Job","type":"heading","anchor":"Submitting-our-first-Job"},{"inlineContent":[{"type":"text","text":"To get started, here is a basic "},{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/SubmittableJob","isActive":true},{"type":"text","text":" that simply prints “Hello from our Job!”:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ExampleJob: SubmittableJob, Codable {","","  func execute() async {","    print(\"Hello from our Job!\")","  }","","}"]},{"inlineContent":[{"text":"As referenced previously, all ","type":"text"},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/SubmittableJob","type":"reference","isActive":true},{"type":"text","text":" implementations must be "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" this allows them to be"},{"text":" ","type":"text"},{"text":"resurrected after the process restarts. To enable the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobDirector"},{"type":"text","text":" to load Jobs it requires a resolver to map your Job"},{"type":"text","text":" "},{"text":"types (e.g. ","type":"text"},{"type":"codeVoice","code":"ExampleJob"},{"type":"text","text":") to a string “type id”."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Kubrick provides a simple resolver, based on type names, that only needs a list of your Job types."}]},{"code":["let jobTypeResolver = TypeNameTypeResolver(jobs: [","  ExampleJob.self","])"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"To submit our "},{"code":"ExampleJob","type":"codeVoice"},{"type":"text","text":" we need a "},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobDirector","isActive":true,"type":"reference"},{"type":"text","text":". To create a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobDirector"},{"type":"text","text":" we need to provide"},{"text":" ","type":"text"},{"text":"a location for the ","type":"text"},{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobStore","isActive":true},{"type":"text","text":" (where the JobDirector saves the state of submitted Jobs) and the previously"},{"type":"text","text":" "},{"type":"text","text":"created type resolver. Additionally, the Director must be started before it can accept Jobs."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let jobDirector = JobDirector(directory: FileManager.default.temporaryDirectory,","                              typeResolver: jobTypeResolver)","","try await jobDirector.start()"]},{"inlineContent":[{"text":"With our created and started ","type":"text"},{"type":"codeVoice","code":"jobDirector"},{"type":"text","text":", we can submit our "},{"code":"ExampleJob","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["try await jobDirector.submit(ExampleJob())"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For all our setup, we should now see the result of our "},{"type":"codeVoice","code":"ExampleJob"},{"text":", in the console:","type":"text"}]},{"code":["Hello from our Job!"],"type":"codeListing","syntax":null},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Job submission is fire-and-forget. And as there are no results or errors allowed from"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/SubmittableJob","isActive":true},{"type":"text","text":"s, there is no method provided by Kubrick to check the status or outcome of submitted Jobs. This"},{"text":" ","type":"text"},{"text":"responsibility is passed on to the implementor. If you want to track the completion of a submitted Job you need to use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"some form of persistence (e.g. CoreData or serializing a "},{"type":"codeVoice","code":"Codable"},{"text":" value to a file).","type":"text"}]}],"name":"Note","style":"note"},{"text":"Job with an input","type":"heading","anchor":"Job-with-an-input","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Jobs are unique based upon their inputs. Any Job of the same type with the same input values will only be executed once"},{"type":"text","text":" "},{"text":"in the context of its root submitted Job. Kubrick determines this Job identity by hashing all of a Job’s inputs.","type":"text"}]},{"inlineContent":[{"text":"You denote a Job’s inputs by using the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobInput"},{"text":" property wrapper. Here we add a message as an input to our","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ExampleJob"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ExampleJob: SubmittableJob, Codable {","","  @JobInput var message: String","","  init(message: String) {","    self.message = message","  }","","  func execute() async {","    print(message)","  }","","  init(from decoder: Decoder) {","    \/\/ ... normal Decodable conformance","    self.init(message: message)","  }","","  func encode(to encode: Encoder) {","    \/\/ ... normal Encodable conformance","  }","","}"]},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobInput","isActive":true},{"text":"s can be assigned a constant value (as seen above) or be linked to the output of other Jobs (as we will","type":"text"},{"type":"text","text":" "},{"text":"see later). As shown, we make sure to implement ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" as required and delegate to the "},{"code":"init(message:)","type":"codeVoice"},{"text":" initializer","type":"text"},{"type":"text","text":" "},{"text":"to ensure the Job’s ","type":"text"},{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobInput","isActive":true},{"type":"text","text":"s are properly restored during resurrection."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The new "},{"code":"ExampleJob","type":"codeVoice"},{"type":"text","text":" can be now be submitted using our new initializer."}]},{"code":["try await jobDirector.submit(ExampleJob(message: \"Hello from our Job!\"))"],"type":"codeListing","syntax":"swift"},{"name":"Warning","style":"warning","type":"aside","content":[{"inlineContent":[{"type":"text","text":""},{"isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobInput","type":"reference"},{"text":" values cannot be read outside of a Job’s ","type":"text"},{"code":"execute","type":"codeVoice"},{"type":"text","text":" method. Any attempt to do so will result in"},{"text":" ","type":"text"},{"type":"text","text":"a fatal assertion failure."}],"type":"paragraph"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"All ","type":"text"},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobInput","type":"reference","isActive":true},{"text":" values must be ","type":"text"},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobHashable","isActive":true,"type":"reference"},{"text":". Kubrick uses a hash of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobInput","isActive":true},{"text":" values, that is","type":"text"},{"type":"text","text":" "},{"text":"stable across process restarts, as the identity for the Job. Out of the box most common Swift types conform to","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobHashable","isActive":true},{"type":"text","text":" as well as any type that conforms to "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":"."}]}],"type":"aside","style":"note"},{"level":2,"text":"Job with a dependency","type":"heading","anchor":"Job-with-a-dependency"},{"inlineContent":[{"text":"Instead of assigning a constant value to a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobInput","type":"reference"},{"type":"text","text":", they can also be bound to the result of a dependent Job. To"},{"text":" ","type":"text"},{"type":"text","text":"bind an input to a dependent Job, the "},{"code":"bind(job:)","type":"codeVoice"},{"text":" method of the input’s projected value is used.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["self.$input.bind(job: SomeJob())"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we will add a "},{"code":"GenerateMessageJob","type":"codeVoice"},{"text":" to our example that produces a message with a random value and bind that to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"message"},{"type":"text","text":" input of our "},{"code":"ExampleJob","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","code":["struct GenerateMessageJob: ResultJob {","  ","  func execute() async throws -> String {","    return \"A random hello \\(Int.random(in: .min ... .max))\"","  }","","}","","struct ExampleJob: SubmittableJob, Codable {","","  @JobInput var message: String","","  init() {","    self.$message.bind(job: GenerateMessageJob())","  }","","  func execute() async {","    print(message)","  }","","  init(from decoder: Decoder) {","    self.init()","  }","","  func encode(to encode: Encoder) {","  }","","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"We now have a “tree of Jobs” where our submittable "},{"code":"ExampleJob","type":"codeVoice"},{"text":" is the root. Submitting the root ","type":"text"},{"type":"codeVoice","code":"ExampleJob"},{"text":" ","type":"text"},{"type":"text","text":"will cause the dependent "},{"code":"GenerateMessageJob","type":"codeVoice"},{"text":" to be executed first and only when its ","type":"text"},{"type":"codeVoice","code":"execute"},{"text":" method has been","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"successfully run to completion will the "},{"type":"codeVoice","code":"execute"},{"type":"text","text":" method of "},{"type":"codeVoice","code":"ExampleJob"},{"type":"text","text":" be executed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Only "},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/SubmittableJob","type":"reference","isActive":true},{"type":"text","text":" implementations need to be "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":". Dependent Jobs are always deserialized as"},{"type":"text","text":" "},{"type":"text","text":"part of the Job tree formed from the root "},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/SubmittableJob","type":"reference","isActive":true},{"text":". This lessens the number of ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations"},{"type":"text","text":" "},{"text":"required.","type":"text"}]},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If any of a Job’s dependencies fail, its ","type":"text"},{"type":"codeVoice","code":"execute"},{"type":"text","text":" method will never be called. When a Job executes all of"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"JobInput"},{"text":"s will have valid values. Failing inputs can be handled using the ","type":"text"},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/catch(handler:)","isActive":true,"type":"reference"},{"type":"text","text":" or"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/mapToResult()","isActive":true},{"type":"text","text":" modifiers."}]}],"style":"note"},{"type":"heading","level":2,"anchor":"Dependency-injection","text":"Dependency injection"},{"inlineContent":[{"text":"Kubrick has integrated dependency injection capabilities that are backed by the Director executing the Job.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobInject","isActive":true,"type":"reference"},{"type":"text","text":" property wrapper is used to inject a dependency value. Injection is based on the type of the value"},{"type":"text","text":" "},{"type":"text","text":"being injected and, optionally, "},{"code":"String","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"String"},{"text":" enum based “tags” to differentiate different values of the same","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we change our example to inject the message we print instead of passing it in or generating it via a dependent Job"},{"text":" ","type":"text"},{"type":"text","text":"as in the previous examples."}]},{"code":["struct ExampleJob: SubmittableJob, Codable {","","  @JobInject(tags: \"message\") var message: String","","  func execute() async {","    print(message)","  }","","  init(from decoder: Decoder) {","  }","","  func encode(to encode: Encoder) {","  }","","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobInject"},{"type":"text","text":" the value must first be configured on the Director via its "},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobDirector\/injected","isActive":true,"type":"reference"},{"type":"text","text":" property."}]},{"code":["jobDirector.injected[String.self, tags: \"message\"] = \"Hello from our Job!\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Now when our "},{"type":"codeVoice","code":"ExampleJob"},{"type":"text","text":" is executed the "},{"code":"message","type":"codeVoice"},{"type":"text","text":" will be injected from the value we setup on the Director."}],"type":"paragraph"},{"level":2,"text":"Dynamically executing Jobs","anchor":"Dynamically-executing-Jobs","type":"heading"},{"inlineContent":[{"text":"Sometimes Jobs must be executed during the execution of a Job itself, for this Kubrick provides the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/DynamicJobDirector","type":"reference"},{"type":"text","text":". The "},{"isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/DynamicJobDirector","type":"reference"},{"type":"text","text":" is provided via the environment injection property wrapper"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobEnvironmentValue"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is our adapted example that runs a dependent Job dynamically that does the printing we previously were doing"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"codeVoice","code":"execute"},{"text":" method.","type":"text"}]},{"code":["struct PrintMessageJob: ExecutableJob {","","  @JobInput var message: String","","  input(message: String) {","    self.message = message","  }","","  func execute() async throws {","    print(message)","  }","","}","","struct ExampleJob: SubmittableJob, Codable {","","  @JobEnvironmentValue(\\.dynamicJobs) var dynamicJobs","","  func execute() async {","    _ = await dynamicJobs.result(for: PrintMessageJob(message: \"Hello from our Job!\"))","  }","","  init(from decoder: Decoder) {","  }","","  func encode(to encode: Encoder) {","  }","","}"],"type":"codeListing","syntax":"swift"},{"style":"tip","name":"Tip","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Dependent Jobs bound to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobInput"},{"text":"s are executed in parallel automatically. To execute dynamic Jobs in","type":"text"},{"text":" ","type":"text"},{"text":"parallel, one of Swift’s concurrency primitives (","type":"text"},{"code":"async let","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"with(Throwing)TaskGroup"},{"type":"text","text":") must be used."}],"type":"paragraph"}]},{"type":"heading","text":"A lesson in Job uniqueness","level":2,"anchor":"A-lesson-in-Job-uniqueness"},{"inlineContent":[{"text":"Jobs can, and should, be broken apart as needed. Jobs are guaranteed to be executed to completion only once and","type":"text"},{"type":"text","text":" "},{"text":"breaking them into separate Jobs allows a large complex tree of Jobs to be restarted without repeating any of the Jobs","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that have already executed to completion."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A Job must be executed to completion to ensure it is not executed again after a restart. Jobs that"},{"text":" ","type":"text"},{"text":"are in the process of executing when its process is restarted will have its ","type":"text"},{"type":"codeVoice","code":"execute"},{"text":" method called again to allow it","type":"text"},{"type":"text","text":" "},{"text":"to complete its run. Any task that should never be executed twice, should be done in a dependent or dynamic Job.","type":"text"}]}],"style":"important","type":"aside","name":"Important"},{"inlineContent":[{"type":"text","text":"As has been stated before, a Job’s identity is formed by the hash of its “type” and all its input values"},{"type":"text","text":" "},{"type":"text","text":"(after dependencies have been resolved to result values)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example of this uniqueness, we will repurpose the example used for dynamic Jobs to show an example of the"},{"type":"text","text":" "},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobDirector","type":"reference","isActive":true},{"text":" not executing Jobs more than once.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses dynamic Jobs to call the "},{"code":"PrintMessageJob","type":"codeVoice"},{"type":"text","text":" Job three times. Two of those dynamic Jobs have the same"},{"type":"text","text":" "},{"type":"text","text":"message input and a third dynamic Job has a different message."}]},{"syntax":"swift","code":["struct PrintMessageJob: ExecutableJob {","","  @JobInput var message: String","","  input(message: String) {","    self.message = message","  }","","  func execute() async throws {","    print(message)","  }","","}","","struct ExampleJob: SubmittableJob, Codable {","","  @JobEnvironmentValue(\\.dynamicJobs) var dynamicJobs","","  func execute() async {","    _ = await dynamicJobs.result(for: PrintMessageJob(message: \"First message!\"))","    _ = await dynamicJobs.result(for: PrintMessageJob(message: \"First message!\"))","    _ = await dynamicJobs.result(for: PrintMessageJob(message: \"Second message!\"))","  }","","  init(from decoder: Decoder) {","  }","","  func encode(to encode: Encoder) {","  }","","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Submitting our new ","type":"text"},{"code":"ExampleJob","type":"codeVoice"},{"type":"text","text":" as normal…"}]},{"type":"codeListing","code":["try await jobDirector.submit(ExampleJob())"],"syntax":"swift"},{"inlineContent":[{"text":"will print the following:","type":"text"}],"type":"paragraph"},{"code":["First message!","Second message!"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Examining what is happening, the ","type":"text"},{"type":"codeVoice","code":"PrintMessageJob"},{"type":"text","text":" has just the single input "},{"type":"codeVoice","code":"message"},{"text":". Since Kubrick determines a Job’s","type":"text"},{"type":"text","text":" "},{"text":"identity by hashing the inputs of the Job. The first two dynamic Jobs yield the same hash and therefore have the same","type":"text"},{"type":"text","text":" "},{"text":"Job identity. Continuing on, since each unique Job only executes to completion once, the second duplicated Job will not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"be executed because in the eyes of the "},{"code":"JobDirector","type":"codeVoice"},{"type":"text","text":" it has already been completed."}]},{"type":"paragraph","inlineContent":[{"text":"Job uniqueness is determined in the context of the root ","type":"text"},{"type":"codeVoice","code":"SubmittableJob"},{"type":"text","text":" that was submitted to the Director."},{"text":" ","type":"text"},{"type":"text","text":"Given this, resubmitting the current "},{"type":"codeVoice","code":"ExampleJob"},{"text":" to the Director ","type":"text"},{"type":"emphasis","inlineContent":[{"inlineContent":[{"type":"text","text":"will"}],"type":"strong"}]},{"type":"text","text":" execute the Job and its dependencies"},{"type":"text","text":" "},{"type":"text","text":"again, printing the same messages as before."}]},{"anchor":"Job-modifiers","text":"Job modifiers","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Kubrick provides Job “modifiers” to handle specific cases like mapping results and retrying Jobs. Job modifiers"},{"type":"text","text":" "},{"type":"text","text":"are applied in a builder style similar to SwiftUI view modifiers."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"text":"These examples using the result builder style ","type":"text"},{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobBinding\/bind(builder:)","isActive":true},{"type":"text","text":" method. You can read more about it"},{"text":" ","type":"text"},{"type":"text","text":"at "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/BindingDependentJobs"},{"type":"text","text":"."}]}],"name":"Tip","type":"aside"},{"type":"heading","text":"Retrys","level":3,"anchor":"Retrys"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Jobs can be retried upon failure using the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/retry(maxAttempts:)"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/retry(filter:)"},{"type":"text","text":" modifier. If a Job"},{"type":"text","text":" "},{"type":"text","text":"retries the maximum # of times the last failure is reported."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is a simple example of a contrived "},{"type":"codeVoice","code":"DataJob"},{"type":"text","text":" where its execution is attempted 3 times."}]},{"syntax":"swift","type":"codeListing","code":["struct ExampleJob: SubmittableJob, Codable {","  ","  @JobInput var retried: Data","","  init() {","    self.$retried.bind {","      DataJob()","        .retry(maxAttempts: 3)","    }","  }","  ","  \/\/ Codable implementation ... ","}"]},{"text":"Catch errors","anchor":"Catch-errors","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A Job can use the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/catch(handler:)"},{"text":" modifier to map any failures to a default or similar value.","type":"text"}]},{"inlineContent":[{"text":"The following example maps any errors from the ","type":"text"},{"type":"codeVoice","code":"RandomIntJob"},{"type":"text","text":" to the value -1."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ExampleJob: SubmittableJob, Codable {","","  @JobInput var random: Int","","  init() {","    self.$random.bind {","      RandomIntJob()","        .catch { _ in return -1 }","    }","  }","","  \/\/ implementation ... ","}"]},{"inlineContent":[{"type":"text","text":"In contrast to “normal” processing, where the failure of a dependent Job means the Job’s execute method is never"},{"text":" ","type":"text"},{"type":"text","text":"called, using "},{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/catch(handler:)","isActive":true},{"type":"text","text":" ensures the Job’s "},{"type":"codeVoice","code":"execute"},{"type":"text","text":" method will be called even if the dependency failed."}],"type":"paragraph"},{"text":"Map results","type":"heading","anchor":"Map-results","level":3},{"inlineContent":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/map(_:)","isActive":true},{"text":" modifier will map a Job’s result to another value; similar to Swift’s built in ","type":"text"},{"type":"codeVoice","code":"map"},{"type":"text","text":" methods."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following example maps an integer from the ","type":"text"},{"type":"codeVoice","code":"RandomIntJob"},{"type":"text","text":" to its String equivalent."}]},{"type":"codeListing","syntax":"swift","code":["struct ExampleJob: SubmittableJob, Codable {","","  @JobInput var random: String","","  init() {","    self.$random.bind {","      RandomIntJob()","        .map { String($0) }","    }","  }","","  \/\/ implementation ... ","}"]},{"level":3,"type":"heading","anchor":"Mapcatch-a-Jobs-result-value-or-error","text":"Map\/catch a Job’s result value or error"},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/mapToResult()","type":"reference"},{"type":"text","text":" maps the result of the Job’s execute method or any error it throws to a standard "},{"code":"Result","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following example maps an integer from the ","type":"text"},{"code":"RandomIntJob","type":"codeVoice"},{"text":" to its String equivalent.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct ExampleJob: SubmittableJob, Codable {","","  @JobInput var random: Result<Int, Error>","","  init() {","    self.$random.bind {","      RandomIntJob()","        .mapToResult()","    }","  }","","  \/\/ implementation ... ","}"]},{"inlineContent":[{"type":"text","text":"In contrast to “normal” processing, where the failure of a dependent Job means the Job’s execute method is never"},{"text":" ","type":"text"},{"text":"called, using ","type":"text"},{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/mapToResult()","type":"reference","isActive":true},{"type":"text","text":" ensures the Job’s "},{"type":"codeVoice","code":"execute"},{"type":"text","text":" method will be called even if the dependency failed and"},{"type":"text","text":" "},{"type":"text","text":"allows inspection of the error during execution."}],"type":"paragraph"},{"text":"Where to go next…","type":"heading","anchor":"Where-to-go-next","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"That covers the basics of Kubrick’s Job capabilities. Check out the following resources to learn more about Kubrick’s"},{"text":" ","type":"text"},{"type":"text","text":"setting up and using Kubrick."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/BindingDependentJobs","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobDirectors","isActive":true,"type":"reference"}]}]}]}],"kind":"content"}],"abstract":[{"text":"Basics of creating Jobs and submitting them to a JobDirector.","type":"text"}],"references":{"doc://Kubrick/documentation/Kubrick/JobHashable":{"abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JobHashable"}],"url":"\/documentation\/kubrick\/jobhashable","title":"JobHashable","navigatorTitle":[{"kind":"identifier","text":"JobHashable"}],"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobHashable","kind":"symbol","type":"topic","role":"symbol"},"doc://Kubrick/documentation/Kubrick/Job/catch(handler:)":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/catch(handler:)","url":"\/documentation\/kubrick\/job\/catch(handler:)","title":"catch(handler:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`catch`","kind":"identifier"},{"text":"(","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Job","preciseIdentifier":"s:7Kubrick3JobP"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">\n"}],"abstract":[]},"logo.png":{"alt":null,"type":"image","identifier":"logo.png","variants":[{"url":"\/images\/logo.png","traits":["1x","light"]},{"url":"\/images\/logo@2x.png","traits":["2x","light"]}]},"doc://Kubrick/documentation/Kubrick/JobBinding/bind(builder:)":{"type":"topic","url":"\/documentation\/kubrick\/jobbinding\/bind(builder:)","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobBinding\/bind(builder:)","kind":"symbol","abstract":[],"role":"symbol","title":"bind(builder:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"bind","kind":"identifier"},{"text":"<","kind":"text"},{"text":"SourceJob","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"builder"},{"text":": () ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"SourceJob","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}]},"doc://Kubrick/documentation/Kubrick/GettingStarted#Dependency-injection":{"abstract":[],"kind":"section","url":"\/documentation\/kubrick\/gettingstarted#Dependency-injection","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#Dependency-injection","type":"topic","title":"Dependency injection"},"doc://Kubrick/documentation/Kubrick/DynamicJobDirector":{"abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"DynamicJobDirector","kind":"identifier"}],"type":"topic","title":"DynamicJobDirector","kind":"symbol","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/DynamicJobDirector","url":"\/documentation\/kubrick\/dynamicjobdirector","role":"symbol","navigatorTitle":[{"text":"DynamicJobDirector","kind":"identifier"}]},"doc://Kubrick/documentation/Kubrick/JobEnvironmentValue":{"role":"symbol","url":"\/documentation\/kubrick\/jobenvironmentvalue","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobEnvironmentValue","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobEnvironmentValue","kind":"identifier"}],"navigatorTitle":[{"text":"JobEnvironmentValue","kind":"identifier"}],"kind":"symbol","title":"JobEnvironmentValue","type":"topic","abstract":[]},"doc://Kubrick/documentation/Kubrick":{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick","role":"collection","kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"text":"Director for persistent, resilient, idempotent, asynchronous Jobs built on Swift concurrency.","type":"text"}],"title":"Kubrick","url":"\/documentation\/kubrick"},"doc://Kubrick/documentation/Kubrick/GettingStarted#A-lesson-in-Job-uniqueness":{"abstract":[],"kind":"section","title":"A lesson in Job uniqueness","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#A-lesson-in-Job-uniqueness","url":"\/documentation\/kubrick\/gettingstarted#A-lesson-in-Job-uniqueness","type":"topic"},"doc://Kubrick/documentation/Kubrick/JobDirector":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"JobDirector","kind":"identifier"}],"abstract":[{"type":"text","text":"Directs execution of submitted jobs."}],"title":"JobDirector","role":"symbol","type":"topic","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobDirector","navigatorTitle":[{"kind":"identifier","text":"JobDirector"}],"kind":"symbol","url":"\/documentation\/kubrick\/jobdirector"},"doc://Kubrick/documentation/Kubrick/BindingDependentJobs":{"role":"article","url":"\/documentation\/kubrick\/bindingdependentjobs","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/BindingDependentJobs","kind":"article","title":"Binding Dependent Jobs","type":"topic","abstract":[{"type":"text","text":"Details of the different ways to bind Dependent Jobs to inputs."}]},"doc://Kubrick/documentation/Kubrick/GettingStarted#Submitting-our-first-Job":{"abstract":[],"kind":"section","title":"Submitting our first Job","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#Submitting-our-first-Job","url":"\/documentation\/kubrick\/gettingstarted#Submitting-our-first-Job","type":"topic"},"doc://Kubrick/documentation/Kubrick/ResultJob":{"role":"symbol","url":"\/documentation\/kubrick\/resultjob","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/ResultJob","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResultJob","kind":"identifier"}],"navigatorTitle":[{"text":"ResultJob","kind":"identifier"}],"kind":"symbol","title":"ResultJob","type":"topic","abstract":[]},"doc://Kubrick/documentation/Kubrick/GettingStarted#Dynamically-executing-Jobs":{"abstract":[],"kind":"section","title":"Dynamically executing Jobs","type":"topic","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#Dynamically-executing-Jobs","url":"\/documentation\/kubrick\/gettingstarted#Dynamically-executing-Jobs"},"doc://Kubrick/documentation/Kubrick/Job/retry(maxAttempts:)":{"role":"symbol","url":"\/documentation\/kubrick\/job\/retry(maxattempts:)","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/retry(maxAttempts:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxAttempts","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Job","preciseIdentifier":"s:7Kubrick3JobP"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">\n"}],"kind":"symbol","title":"retry(maxAttempts:)","type":"topic","abstract":[]},"doc://Kubrick/documentation/Kubrick/GettingStarted#Job-modifiers":{"abstract":[],"kind":"section","title":"Job modifiers","type":"topic","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#Job-modifiers","url":"\/documentation\/kubrick\/gettingstarted#Job-modifiers"},"doc://Kubrick/documentation/Kubrick/JobDirector/injected":{"title":"injected","url":"\/documentation\/kubrick\/jobdirector\/injected","abstract":[],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobDirector\/injected","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"injected","kind":"identifier"},{"text":": ","kind":"text"},{"text":"JobInjectValues","kind":"typeIdentifier","preciseIdentifier":"s:7Kubrick15JobInjectValuesC"}]},"doc://Kubrick/documentation/Kubrick/SubmittableJob":{"abstract":[],"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/SubmittableJob","url":"\/documentation\/kubrick\/submittablejob","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SubmittableJob"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"SubmittableJob"}],"kind":"symbol","title":"SubmittableJob","role":"symbol"},"doc://Kubrick/documentation/Kubrick/JobStore":{"title":"Job Store","url":"\/documentation\/kubrick\/jobstore","abstract":[{"type":"text","text":"Details of the "},{"type":"codeVoice","code":"job-store"},{"type":"text","text":" format used to save\/restore Job state."}],"kind":"article","role":"article","type":"topic","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobStore"},"doc://Kubrick/documentation/Kubrick/GettingStarted#Job-with-a-dependency":{"url":"\/documentation\/kubrick\/gettingstarted#Job-with-a-dependency","abstract":[],"kind":"section","type":"topic","title":"Job with a dependency","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#Job-with-a-dependency"},"doc://Kubrick/documentation/Kubrick/GettingStarted#Job-with-an-input":{"abstract":[],"kind":"section","title":"Job with an input","type":"topic","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/GettingStarted#Job-with-an-input","url":"\/documentation\/kubrick\/gettingstarted#Job-with-an-input"},"doc://Kubrick/documentation/Kubrick/Job/map(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Job","preciseIdentifier":"s:7Kubrick3JobP"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"kind":"text","text":">\n"}],"abstract":[],"title":"map(_:)","role":"symbol","type":"topic","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/map(_:)","url":"\/documentation\/kubrick\/job\/map(_:)","kind":"symbol"},"doc://Kubrick/documentation/Kubrick/JobInput":{"type":"topic","url":"\/documentation\/kubrick\/jobinput","title":"JobInput","kind":"symbol","navigatorTitle":[{"text":"JobInput","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobInput","abstract":[],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"JobInput"}]},"doc://Kubrick/documentation/Kubrick/Job":{"identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job","navigatorTitle":[{"text":"Job","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Job","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/kubrick\/job","abstract":[],"title":"Job"},"doc://Kubrick/documentation/Kubrick/JobInject":{"abstract":[],"url":"\/documentation\/kubrick\/jobinject","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobInject","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"JobInject"}],"kind":"symbol","title":"JobInject","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobInject","type":"topic"},"doc://Kubrick/documentation/Kubrick/Job/mapToResult()":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"mapToResult","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7Kubrick3JobP","text":"Job","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ExecuteResult","preciseIdentifier":"s:7Kubrick13ExecuteResultO"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">>\n","kind":"text"}],"abstract":[],"title":"mapToResult()","role":"symbol","type":"topic","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/mapToResult()","url":"\/documentation\/kubrick\/job\/maptoresult()","kind":"symbol"},"doc://Kubrick/documentation/Kubrick/JobDirectors":{"abstract":[{"type":"text","text":"Details of coordination between principal and assistant Directors."}],"title":"Job Directors","role":"article","type":"topic","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/JobDirectors","url":"\/documentation\/kubrick\/jobdirectors","kind":"article"},"doc://Kubrick/documentation/Kubrick/Job/retry(filter:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"retry","kind":"identifier"},{"text":"(","kind":"text"},{"text":"filter","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Kubrick3JobP","text":"Job"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">\n"}],"abstract":[],"title":"retry(filter:)","role":"symbol","type":"topic","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/Job\/retry(filter:)","url":"\/documentation\/kubrick\/job\/retry(filter:)","kind":"symbol"},"doc://Kubrick/documentation/Kubrick/ExecutableJob":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExecutableJob","kind":"identifier"}],"abstract":[],"title":"ExecutableJob","role":"symbol","type":"topic","identifier":"doc:\/\/Kubrick\/documentation\/Kubrick\/ExecutableJob","navigatorTitle":[{"text":"ExecutableJob","kind":"identifier"}],"url":"\/documentation\/kubrick\/executablejob","kind":"symbol"}}}